 #include<stdio.h>
 #include<stdlib.h>
 #include<conio.h>
 
 /* Queue using Dynamic Array using C language */
 
 struct QueueADT{
 	int capacity;
 	int front,rear;
 	int *arr;
 };
 
 QueueADT* createQueue(int c){ // Creating Queue
 	QueueADT *temp;
 	temp = (QueueADT*) malloc(sizeof(QueueADT));
 	temp->capacity = c;
 	temp->rear = temp->front = -1;
 	temp->arr = (int*) malloc(sizeof(int)*temp->capacity);
 	return temp;
 } // End of create queue function
 
 
int isEmpty(struct QueueADT *t){ // check if queue is empty
	if(t->front==-1)
		return 1;
	else
		return 0;
} // end

int isFull(struct QueueADT *t){ // check if queue is full
	if(t->front==0 && (t->rear == t->capacity-1) )
		return 1;
	else if(t->front == t->rear+1)
		return 1;
	else
		return 0;
} // end
 
int getQueueCapacity(struct QueueADT *t){
	return t->capacity;
}

void doubleQueue(struct QueueADT *t){ // double the queue size
	int i,j;
	int *temp;
	t->capacity *= 2;
	temp = (int*) malloc(sizeof(int)*t->capacity);
	
	for(i=t->front,j=0; j<= t->capacity/2-1; j++){
		temp[j] = t->arr[i];
		if(i==t->capacity/2-1)
			i = 0;
		else
			i++;
	}
	t->front = 0;
	t->rear = t->capacity/2-1;
	
	free(t->arr);
	t->arr = temp;
} // end
 
 
void halfQueue(struct QueueADT *t){ // half the quue size
 	int i,j,l;
 	int *temp;
 	temp = (int*) malloc(sizeof(int)*t->capacity/2);
 	l = t->capacity/2;
 	
 	for(i=0,j=t->front; j<l; i++){
 		temp[i] = t->arr[j];
 		if(j==t->capacity-1)
 			j = 0;
 		else
 			j++;
	 }
	 t->capacity /= 2;
	 free(t->arr) ;
	 t->arr = temp;
	 t->front = 0;
	 t->rear = t->capacity-1;	
 }
 

void enQueue(struct QueueADT *t,int data){ // insertion in the queue
	if(t->capacity<1){
		printf("Invalid Capacity");
		getch();
	}		
	else{
		if(isEmpty(t)){
			t->front = 0;
			t->rear = 0;
			t->arr[t->rear] = data;
		}
		else if(isFull(t)){
			doubleQueue(t);
			t->rear++;
			t->arr[t->rear] = data;
		}
		else{
			if(t->rear==t->capacity-1)
				t->rear = 0;
			else
				t->rear++;
			
			t->arr[t->rear] = data;
		}
	}
} // end
 

void deQueue(struct QueueADT *t){ // delete an element from the queue
	int size=0,i;
	
	if(isEmpty(t)){
		printf("\nUnderflow");
		getch();
	}		
	else if(t->front==t->rear)
		t->front = t->rear = -1;			
	else if(t->front == t->capacity-1)
		t->front = 0;		
	else
		t->front++;

	if(t->front>-1){
		for(i=t->front;i!=t->rear;){
			size++;
			if(i==t->capacity-1)
				i=0;
			else
				i++;
		}
		size++;
		
		if(size==t->capacity/2)
			halfQueue(t);
	}
}
 

QueueADT* deleteQueue(struct QueueADT *t){ // delete the queue
	
		free(t->arr);
		free(t);
		return(NULL);

}

int menu(){ // menu function
	int choice;
	system("cls");
	printf("\n\t1. See the status of the queue");
	printf("\n\t2. Insert a data in the queue");
	printf("\n\t3. Delete a data from the queue");
	printf("\n\t4. End program");
	printf("\n\n\tEnter your choice : ");
	scanf("%d",&choice);
	return choice;
}
  
 // main function 
int main(){	
	QueueADT *Q;
	Q = createQueue(1);
	int data;

	while(1){
		switch(menu()){
			case 1:
				printf("\n\tCapacity : %d",getQueueCapacity(Q));
				printf("\n\tFront : %d, Rear : %d",Q->front,Q->rear);
				break;
			case 2:
				printf("\n\tEnter a number : ");
				scanf("%d",&data);
				enQueue(Q,data);
				break;
			case 3:
				deQueue(Q);
				break;
			case 4:
				Q = deleteQueue(Q);
				exit(1);
			default:
				printf("Wrong Choice");
				getch();		
		}
		getch();
	}
}

 
